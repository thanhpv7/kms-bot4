###
# @bot-written
#
# WARNING AND NOTICE
# Any access, download, storage, and/or use of this source code is subject to the terms and conditions of the
# Full Software Licence as accepted by you before being granted access to this source code and other materials,
# the terms of which can be accessed on the Codebots website at https://codebots.com/full-software-licence. Any
# commercial use in contravention of the terms of the Full Software Licence may be pursued by Codebots through
# licence termination and further legal action, and be required to indemnify Codebots for any loss or damage,
# including interest and costs. You are deemed to have accepted the terms of the Full Software Licence on any
# access, download, storage, and/or use of this source code.
#
# BOT WARNING
# This file is bot-written.
# Any changes out side of "protected regions" will be lost next time the bot makes any changes.
###

type ExaminationItem {
	id: ID
	created: String
	modified: String
	description: String
	examinationLevel: String
	examinationType: String
	itemCode: String
	sample: String
	examinationGroup: ExaminationGroup
	serviceItem: ServiceItem
	diagnosticExaminationResults: [DiagnosticExaminationResults]
	examinationItemDetails: [ExaminationItemDetail]
	examinationItemOfMCUItem: [McuPackageItem]
	registrations: [Registration]
	# % protected region % [Add any additional field definition here] off begin
	# % protected region % [Add any additional field definition here] end
}

type ExaminationItemAudit {
	entity: ExaminationItem
	timestamp: String
	type: AuditQueryType
	authorId: ID
	authorFirstName: String
	authorLastName: String
}

input ExaminationItemInput {
	id: ID
	created: String
	modified: String
	description: String
	examinationLevel: String
	examinationType: String
	itemCode: String
	sample: String
	examinationGroup: ExaminationGroupInput
	examinationGroupId: ID
	serviceItem: ServiceItemInput
	serviceItemId: ID
	diagnosticExaminationResults: [DiagnosticExaminationResultsInput]
	diagnosticExaminationResultsIds: [ID!]
	examinationItemDetails: [ExaminationItemDetailInput]
	examinationItemDetailsIds: [ID!]
	examinationItemOfMCUItem: [McuPackageItemInput]
	examinationItemOfMCUItemIds: [ID!]
	registrations: [RegistrationInput]
	registrationsIds: [ID!]
	# % protected region % [Add any additional field definition for input type here] off begin
	# % protected region % [Add any additional field definition for input type here] end
}

extend type Query {
	countExaminationItems(where: [[Where!]!]): Int!
	lastExaminationItems(pageIndex: Int = 0, pageSize: Int = 10, orderBy: [OrderBy!]! = [], where: [[Where!]!] = []): [ExaminationItem!]!
	examinationItems(pageIndex: Int = 0, pageSize: Int = 10, orderBy: [OrderBy!] = [], where: [[Where!]!] = []): [ExaminationItem!]!
	examinationItemById(id: ID!): ExaminationItem
	examinationItemAudits: [ExaminationItemAudit!]!
	examinationItemAuditsByEntityId(examinationItemId: ID!): [ExaminationItemAudit!]!
	# % protected region % [Add any additional query definition here] off begin
	# % protected region % [Add any additional query definition here] end
}

extend type Mutation {
	createExaminationItem(examinationItem: ExaminationItemInput!, persistRelations: Boolean): ExaminationItem!
	createAllExaminationItem(examinationItems: [ExaminationItemInput!]!): [ExaminationItem!]!
	updateExaminationItem(examinationItem: ExaminationItemInput!, persistRelations: Boolean): ExaminationItem!
	updateAllExaminationItem(examinationItems: [ExaminationItemInput!]!): [ExaminationItem!]!
	deleteExaminationItemById(examinationItemId: ID!): ID!
	deleteAllExaminationItemByIds(examinationItemIds: [ID!]!): [ID!]!
	deleteExaminationItemExcludingIds(examinationItemIds: [ID!]!): [ID!]!
	# % protected region % [Add any additional mutation definition here] off begin
	# % protected region % [Add any additional mutation definition here] end
}

# % protected region % [Add additional schema definition here] off begin
# % protected region % [Add additional schema definition here] end
