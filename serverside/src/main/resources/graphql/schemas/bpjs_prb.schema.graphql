###
# @bot-written
#
# WARNING AND NOTICE
# Any access, download, storage, and/or use of this source code is subject to the terms and conditions of the
# Full Software Licence as accepted by you before being granted access to this source code and other materials,
# the terms of which can be accessed on the Codebots website at https://codebots.com/full-software-licence. Any
# commercial use in contravention of the terms of the Full Software Licence may be pursued by Codebots through
# licence termination and further legal action, and be required to indemnify Codebots for any loss or damage,
# including interest and costs. You are deemed to have accepted the terms of the Full Software Licence on any
# access, download, storage, and/or use of this source code.
#
# BOT WARNING
# This file is bot-written.
# Any changes out side of "protected regions" will be lost next time the bot makes any changes.
###

type BpjsPRB {
	id: ID
	created: String
	modified: String
	address: String
	bpjsCardNo: String
	doctorCode: String
	doctorName: String
	email: String
	notes: String
	prbProgramCode: String
	prbProgramName: String
	recommendation: String
	sepNo: String
	srbNo: String
	bpjsDiagnosePRB: BpjsDiagnosePRB
	bpjsDoctorMapping: BpjsDoctorMapping
	# % protected region % [Add any additional field definition here] off begin
	# % protected region % [Add any additional field definition here] end
}

type BpjsPRBAudit {
	entity: BpjsPRB
	timestamp: String
	type: AuditQueryType
	authorId: ID
	authorFirstName: String
	authorLastName: String
}

input BpjsPRBInput {
	id: ID
	created: String
	modified: String
	address: String
	bpjsCardNo: String
	doctorCode: String
	doctorName: String
	email: String
	notes: String
	prbProgramCode: String
	prbProgramName: String
	recommendation: String
	sepNo: String
	srbNo: String
	bpjsDiagnosePRB: BpjsDiagnosePRBInput
	bpjsDiagnosePRBId: ID
	bpjsDoctorMapping: BpjsDoctorMappingInput
	bpjsDoctorMappingId: ID
	# % protected region % [Add any additional field definition for input type here] off begin
	# % protected region % [Add any additional field definition for input type here] end
}

extend type Query {
	countBpjsPRBs(where: [[Where!]!]): Int!
	lastBpjsPRBs(pageIndex: Int = 0, pageSize: Int = 10, orderBy: [OrderBy!]! = [], where: [[Where!]!] = []): [BpjsPRB!]!
	bpjsPRBs(pageIndex: Int = 0, pageSize: Int = 10, orderBy: [OrderBy!] = [], where: [[Where!]!] = []): [BpjsPRB!]!
	bpjsPRBById(id: ID!): BpjsPRB
	bpjsPRBAudits: [BpjsPRBAudit!]!
	bpjsPRBAuditsByEntityId(bpjsPRBId: ID!): [BpjsPRBAudit!]!
	# % protected region % [Add any additional query definition here] off begin
	# % protected region % [Add any additional query definition here] end
}

extend type Mutation {
	createBpjsPRB(bpjsPRB: BpjsPRBInput!, persistRelations: Boolean): BpjsPRB!
	createAllBpjsPRB(bpjsPRBs: [BpjsPRBInput!]!): [BpjsPRB!]!
	updateBpjsPRB(bpjsPRB: BpjsPRBInput!, persistRelations: Boolean): BpjsPRB!
	updateAllBpjsPRB(bpjsPRBs: [BpjsPRBInput!]!): [BpjsPRB!]!
	deleteBpjsPRBById(bpjsPRBId: ID!): ID!
	deleteAllBpjsPRBByIds(bpjsPRBIds: [ID!]!): [ID!]!
	deleteBpjsPRBExcludingIds(bpjsPRBIds: [ID!]!): [ID!]!
	# % protected region % [Add any additional mutation definition here] off begin
	# % protected region % [Add any additional mutation definition here] end
}

# % protected region % [Add additional schema definition here] off begin
# % protected region % [Add additional schema definition here] end
