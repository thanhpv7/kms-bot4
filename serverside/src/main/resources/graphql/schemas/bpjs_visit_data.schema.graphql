###
# @bot-written
#
# WARNING AND NOTICE
# Any access, download, storage, and/or use of this source code is subject to the terms and conditions of the
# Full Software Licence as accepted by you before being granted access to this source code and other materials,
# the terms of which can be accessed on the Codebots website at https://codebots.com/full-software-licence. Any
# commercial use in contravention of the terms of the Full Software Licence may be pursued by Codebots through
# licence termination and further legal action, and be required to indemnify Codebots for any loss or damage,
# including interest and costs. You are deemed to have accepted the terms of the Full Software Licence on any
# access, download, storage, and/or use of this source code.
#
# BOT WARNING
# This file is bot-written.
# Any changes out side of "protected regions" will be lost next time the bot makes any changes.
###

type BpjsVisitData {
	id: ID
	created: String
	modified: String
	bpjsCardNo: String
	diagnose: String
	jsonInsert: String
	jsonUpdate: String
	name: String
	polyclinic: String
	referralNo: String
	sepDate: String
	sepDismissalDate: String
	sepNo: String
	treatmentClass: String
	treatmentType: String
	patientVisit: PatientVisit
	# % protected region % [Add any additional field definition here] off begin
	# % protected region % [Add any additional field definition here] end
}

type BpjsVisitDataAudit {
	entity: BpjsVisitData
	timestamp: String
	type: AuditQueryType
	authorId: ID
	authorFirstName: String
	authorLastName: String
}

input BpjsVisitDataInput {
	id: ID
	created: String
	modified: String
	bpjsCardNo: String
	diagnose: String
	jsonInsert: String
	jsonUpdate: String
	name: String
	polyclinic: String
	referralNo: String
	sepDate: String
	sepDismissalDate: String
	sepNo: String
	treatmentClass: String
	treatmentType: String
	patientVisit: PatientVisitInput
	patientVisitId: ID
	# % protected region % [Add any additional field definition for input type here] off begin
	# % protected region % [Add any additional field definition for input type here] end
}

extend type Query {
	countBpjsVisitDatas(where: [[Where!]!]): Int!
	lastBpjsVisitDatas(pageIndex: Int = 0, pageSize: Int = 10, orderBy: [OrderBy!]! = [], where: [[Where!]!] = []): [BpjsVisitData!]!
	bpjsVisitDatas(pageIndex: Int = 0, pageSize: Int = 10, orderBy: [OrderBy!] = [], where: [[Where!]!] = []): [BpjsVisitData!]!
	bpjsVisitDataById(id: ID!): BpjsVisitData
	bpjsVisitDataAudits: [BpjsVisitDataAudit!]!
	bpjsVisitDataAuditsByEntityId(bpjsVisitDataId: ID!): [BpjsVisitDataAudit!]!
	# % protected region % [Add any additional query definition here] off begin
	# % protected region % [Add any additional query definition here] end
}

extend type Mutation {
	createBpjsVisitData(bpjsVisitData: BpjsVisitDataInput!, persistRelations: Boolean): BpjsVisitData!
	createAllBpjsVisitData(bpjsVisitDatas: [BpjsVisitDataInput!]!): [BpjsVisitData!]!
	updateBpjsVisitData(bpjsVisitData: BpjsVisitDataInput!, persistRelations: Boolean): BpjsVisitData!
	updateAllBpjsVisitData(bpjsVisitDatas: [BpjsVisitDataInput!]!): [BpjsVisitData!]!
	deleteBpjsVisitDataById(bpjsVisitDataId: ID!): ID!
	deleteAllBpjsVisitDataByIds(bpjsVisitDataIds: [ID!]!): [ID!]!
	deleteBpjsVisitDataExcludingIds(bpjsVisitDataIds: [ID!]!): [ID!]!
	# % protected region % [Add any additional mutation definition here] off begin
	# % protected region % [Add any additional mutation definition here] end
}

# % protected region % [Add additional schema definition here] off begin
# % protected region % [Add additional schema definition here] end
