###
# @bot-written
#
# WARNING AND NOTICE
# Any access, download, storage, and/or use of this source code is subject to the terms and conditions of the
# Full Software Licence as accepted by you before being granted access to this source code and other materials,
# the terms of which can be accessed on the Codebots website at https://codebots.com/full-software-licence. Any
# commercial use in contravention of the terms of the Full Software Licence may be pursued by Codebots through
# licence termination and further legal action, and be required to indemnify Codebots for any loss or damage,
# including interest and costs. You are deemed to have accepted the terms of the Full Software Licence on any
# access, download, storage, and/or use of this source code.
#
# BOT WARNING
# This file is bot-written.
# Any changes out side of "protected regions" will be lost next time the bot makes any changes.
###

type PcareCompoundDrug {
	id: ID
	created: String
	modified: String
	compoundName: String
	day: Float
	drugQty: Float
	kdObatSK: String
	kdRacikan: String
	namaObatNonDPHO: String
	packageQty: Float
	racikan: Boolean
	requestQty: Int
	signaDays: Float
	signaTimes: Int
	pcareExamination: PcareExamination
	pcareCompoundDrugItems: [PcareCompoundDrugItem]
	# % protected region % [Add any additional field definition here] off begin
	# % protected region % [Add any additional field definition here] end
}

type PcareCompoundDrugAudit {
	entity: PcareCompoundDrug
	timestamp: String
	type: AuditQueryType
	authorId: ID
	authorFirstName: String
	authorLastName: String
}

input PcareCompoundDrugInput {
	id: ID
	created: String
	modified: String
	compoundName: String
	day: Float
	drugQty: Float
	kdObatSK: String
	kdRacikan: String
	namaObatNonDPHO: String
	packageQty: Float
	racikan: Boolean
	requestQty: Int
	signaDays: Float
	signaTimes: Int
	pcareExamination: PcareExaminationInput
	pcareExaminationId: ID
	pcareCompoundDrugItems: [PcareCompoundDrugItemInput]
	pcareCompoundDrugItemsIds: [ID!]
	# % protected region % [Add any additional field definition for input type here] off begin
	# % protected region % [Add any additional field definition for input type here] end
}

extend type Query {
	countPcareCompoundDrugs(where: [[Where!]!]): Int!
	lastPcareCompoundDrugs(pageIndex: Int = 0, pageSize: Int = 10, orderBy: [OrderBy!]! = [], where: [[Where!]!] = []): [PcareCompoundDrug!]!
	pcareCompoundDrugs(pageIndex: Int = 0, pageSize: Int = 10, orderBy: [OrderBy!] = [], where: [[Where!]!] = []): [PcareCompoundDrug!]!
	pcareCompoundDrugById(id: ID!): PcareCompoundDrug
	pcareCompoundDrugAudits: [PcareCompoundDrugAudit!]!
	pcareCompoundDrugAuditsByEntityId(pcareCompoundDrugId: ID!): [PcareCompoundDrugAudit!]!
	# % protected region % [Add any additional query definition here] off begin
	# % protected region % [Add any additional query definition here] end
}

extend type Mutation {
	createPcareCompoundDrug(pcareCompoundDrug: PcareCompoundDrugInput!, persistRelations: Boolean): PcareCompoundDrug!
	createAllPcareCompoundDrug(pcareCompoundDrugs: [PcareCompoundDrugInput!]!): [PcareCompoundDrug!]!
	updatePcareCompoundDrug(pcareCompoundDrug: PcareCompoundDrugInput!, persistRelations: Boolean): PcareCompoundDrug!
	updateAllPcareCompoundDrug(pcareCompoundDrugs: [PcareCompoundDrugInput!]!): [PcareCompoundDrug!]!
	deletePcareCompoundDrugById(pcareCompoundDrugId: ID!): ID!
	deleteAllPcareCompoundDrugByIds(pcareCompoundDrugIds: [ID!]!): [ID!]!
	deletePcareCompoundDrugExcludingIds(pcareCompoundDrugIds: [ID!]!): [ID!]!
	# % protected region % [Add any additional mutation definition here] off begin
	# % protected region % [Add any additional mutation definition here] end
}

# % protected region % [Add additional schema definition here] off begin
# % protected region % [Add additional schema definition here] end
