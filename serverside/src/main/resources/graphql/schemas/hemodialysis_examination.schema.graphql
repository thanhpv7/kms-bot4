###
# @bot-written
#
# WARNING AND NOTICE
# Any access, download, storage, and/or use of this source code is subject to the terms and conditions of the
# Full Software Licence as accepted by you before being granted access to this source code and other materials,
# the terms of which can be accessed on the Codebots website at https://codebots.com/full-software-licence. Any
# commercial use in contravention of the terms of the Full Software Licence may be pursued by Codebots through
# licence termination and further legal action, and be required to indemnify Codebots for any loss or damage,
# including interest and costs. You are deemed to have accepted the terms of the Full Software Licence on any
# access, download, storage, and/or use of this source code.
#
# BOT WARNING
# This file is bot-written.
# Any changes out side of "protected regions" will be lost next time the bot makes any changes.
###

type HemodialysisExamination {
	id: ID
	created: String
	modified: String
	antiHCV: Boolean
	antiHIV: Boolean
	blood: Float
	complication: String
	condition: String
	dialysisFluid: String
	dialysisFrequency: String
	dialysisNo: String
	dialyzer: String
	dialyzerType: String
	dryWeight: Float
	dryWeightUnit: String
	firstDialysis: String
	fluidBalance: Float
	hbsag: Boolean
	hemodialysisDetails: String
	hemodialysisEndTime: String
	hemodialysisStartTime: String
	hemodialysisType: String
	heparinization: String
	heparinizationFollowUpDose: String
	heparinizationInitialDose: String
	ivLine: Float
	oral: Float
	others: Float
	postHemodialysisEvaluation: String
	priming: Float
	primingVolume: String
	remainingPriming: String
	target: String
	totalFluidIntake: Float
	totalFluidOutput: Float
	urine: Float
	vascularAccess: String
	washOut: Float
	weightDuringPreviousHemodialysis: Float
	weightDuringPreviousHemodialysisUnit: String
	weightUponArrival: Float
	weightUponArrivalUnit: String
	weightUponDismissal: Float
	weightUponDismissalUnit: String
	medicalExaminationRecord: MedicalExaminationRecord
	hemodialysisMonitorings: [HemodialysisMonitoring]
	# % protected region % [Add any additional field definition here] off begin
	# % protected region % [Add any additional field definition here] end
}

type HemodialysisExaminationAudit {
	entity: HemodialysisExamination
	timestamp: String
	type: AuditQueryType
	authorId: ID
	authorFirstName: String
	authorLastName: String
}

input HemodialysisExaminationInput {
	id: ID
	created: String
	modified: String
	antiHCV: Boolean
	antiHIV: Boolean
	blood: Float
	complication: String
	condition: String
	dialysisFluid: String
	dialysisFrequency: String
	dialysisNo: String
	dialyzer: String
	dialyzerType: String
	dryWeight: Float
	dryWeightUnit: String
	firstDialysis: String
	fluidBalance: Float
	hbsag: Boolean
	hemodialysisDetails: String
	hemodialysisEndTime: String
	hemodialysisStartTime: String
	hemodialysisType: String
	heparinization: String
	heparinizationFollowUpDose: String
	heparinizationInitialDose: String
	ivLine: Float
	oral: Float
	others: Float
	postHemodialysisEvaluation: String
	priming: Float
	primingVolume: String
	remainingPriming: String
	target: String
	totalFluidIntake: Float
	totalFluidOutput: Float
	urine: Float
	vascularAccess: String
	washOut: Float
	weightDuringPreviousHemodialysis: Float
	weightDuringPreviousHemodialysisUnit: String
	weightUponArrival: Float
	weightUponArrivalUnit: String
	weightUponDismissal: Float
	weightUponDismissalUnit: String
	medicalExaminationRecord: MedicalExaminationRecordInput
	medicalExaminationRecordId: ID
	hemodialysisMonitorings: [HemodialysisMonitoringInput]
	hemodialysisMonitoringsIds: [ID!]
	# % protected region % [Add any additional field definition for input type here] off begin
	# % protected region % [Add any additional field definition for input type here] end
}

extend type Query {
	countHemodialysisExaminations(where: [[Where!]!]): Int!
	lastHemodialysisExaminations(pageIndex: Int = 0, pageSize: Int = 10, orderBy: [OrderBy!]! = [], where: [[Where!]!] = []): [HemodialysisExamination!]!
	hemodialysisExaminations(pageIndex: Int = 0, pageSize: Int = 10, orderBy: [OrderBy!] = [], where: [[Where!]!] = []): [HemodialysisExamination!]!
	hemodialysisExaminationById(id: ID!): HemodialysisExamination
	hemodialysisExaminationAudits: [HemodialysisExaminationAudit!]!
	hemodialysisExaminationAuditsByEntityId(hemodialysisExaminationId: ID!): [HemodialysisExaminationAudit!]!
	# % protected region % [Add any additional query definition here] off begin
	# % protected region % [Add any additional query definition here] end
}

extend type Mutation {
	createHemodialysisExamination(hemodialysisExamination: HemodialysisExaminationInput!, persistRelations: Boolean): HemodialysisExamination!
	createAllHemodialysisExamination(hemodialysisExaminations: [HemodialysisExaminationInput!]!): [HemodialysisExamination!]!
	updateHemodialysisExamination(hemodialysisExamination: HemodialysisExaminationInput!, persistRelations: Boolean): HemodialysisExamination!
	updateAllHemodialysisExamination(hemodialysisExaminations: [HemodialysisExaminationInput!]!): [HemodialysisExamination!]!
	deleteHemodialysisExaminationById(hemodialysisExaminationId: ID!): ID!
	deleteAllHemodialysisExaminationByIds(hemodialysisExaminationIds: [ID!]!): [ID!]!
	deleteHemodialysisExaminationExcludingIds(hemodialysisExaminationIds: [ID!]!): [ID!]!
	# % protected region % [Add any additional mutation definition here] off begin
	# % protected region % [Add any additional mutation definition here] end
}

# % protected region % [Add additional schema definition here] off begin
# % protected region % [Add additional schema definition here] end
