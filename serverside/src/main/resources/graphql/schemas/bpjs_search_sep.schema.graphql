###
# @bot-written
#
# WARNING AND NOTICE
# Any access, download, storage, and/or use of this source code is subject to the terms and conditions of the
# Full Software Licence as accepted by you before being granted access to this source code and other materials,
# the terms of which can be accessed on the Codebots website at https://codebots.com/full-software-licence. Any
# commercial use in contravention of the terms of the Full Software Licence may be pursued by Codebots through
# licence termination and further legal action, and be required to indemnify Codebots for any loss or damage,
# including interest and costs. You are deemed to have accepted the terms of the Full Software Licence on any
# access, download, storage, and/or use of this source code.
#
# BOT WARNING
# This file is bot-written.
# Any changes out side of "protected regions" will be lost next time the bot makes any changes.
###

type BpjsSearchSEP {
	id: ID
	created: String
	modified: String
	bpjsCardNo: String
	dateOfBirth: String
	diagnose: String
	gender: String
	name: String
	polyclinic: String
	provider: String
	referralDate: String
	referralNo: String
	referralProvider: String
	referralSource: String
	sepDate: String
	sepNo: String
	treatmentClass: String
	treatmentType: String
	# % protected region % [Add any additional field definition here] off begin
	# % protected region % [Add any additional field definition here] end
}

type BpjsSearchSEPAudit {
	entity: BpjsSearchSEP
	timestamp: String
	type: AuditQueryType
	authorId: ID
	authorFirstName: String
	authorLastName: String
}

input BpjsSearchSEPInput {
	id: ID
	created: String
	modified: String
	bpjsCardNo: String
	dateOfBirth: String
	diagnose: String
	gender: String
	name: String
	polyclinic: String
	provider: String
	referralDate: String
	referralNo: String
	referralProvider: String
	referralSource: String
	sepDate: String
	sepNo: String
	treatmentClass: String
	treatmentType: String
	# % protected region % [Add any additional field definition for input type here] off begin
	# % protected region % [Add any additional field definition for input type here] end
}

extend type Query {
	countBpjsSearchSEPs(where: [[Where!]!]): Int!
	lastBpjsSearchSEPs(pageIndex: Int = 0, pageSize: Int = 10, orderBy: [OrderBy!]! = [], where: [[Where!]!] = []): [BpjsSearchSEP!]!
	bpjsSearchSEPs(pageIndex: Int = 0, pageSize: Int = 10, orderBy: [OrderBy!] = [], where: [[Where!]!] = []): [BpjsSearchSEP!]!
	bpjsSearchSEPById(id: ID!): BpjsSearchSEP
	bpjsSearchSEPAudits: [BpjsSearchSEPAudit!]!
	bpjsSearchSEPAuditsByEntityId(bpjsSearchSEPId: ID!): [BpjsSearchSEPAudit!]!
	# % protected region % [Add any additional query definition here] off begin
	# % protected region % [Add any additional query definition here] end
}

extend type Mutation {
	createBpjsSearchSEP(bpjsSearchSEP: BpjsSearchSEPInput!, persistRelations: Boolean): BpjsSearchSEP!
	createAllBpjsSearchSEP(bpjsSearchSEPs: [BpjsSearchSEPInput!]!): [BpjsSearchSEP!]!
	updateBpjsSearchSEP(bpjsSearchSEP: BpjsSearchSEPInput!, persistRelations: Boolean): BpjsSearchSEP!
	updateAllBpjsSearchSEP(bpjsSearchSEPs: [BpjsSearchSEPInput!]!): [BpjsSearchSEP!]!
	deleteBpjsSearchSEPById(bpjsSearchSEPId: ID!): ID!
	deleteAllBpjsSearchSEPByIds(bpjsSearchSEPIds: [ID!]!): [ID!]!
	deleteBpjsSearchSEPExcludingIds(bpjsSearchSEPIds: [ID!]!): [ID!]!
	# % protected region % [Add any additional mutation definition here] off begin
	# % protected region % [Add any additional mutation definition here] end
}

# % protected region % [Add additional schema definition here] off begin
# % protected region % [Add additional schema definition here] end
