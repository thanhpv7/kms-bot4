###
# @bot-written
#
# WARNING AND NOTICE
# Any access, download, storage, and/or use of this source code is subject to the terms and conditions of the
# Full Software Licence as accepted by you before being granted access to this source code and other materials,
# the terms of which can be accessed on the Codebots website at https://codebots.com/full-software-licence. Any
# commercial use in contravention of the terms of the Full Software Licence may be pursued by Codebots through
# licence termination and further legal action, and be required to indemnify Codebots for any loss or damage,
# including interest and costs. You are deemed to have accepted the terms of the Full Software Licence on any
# access, download, storage, and/or use of this source code.
#
# BOT WARNING
# This file is bot-written.
# Any changes out side of "protected regions" will be lost next time the bot makes any changes.
###

type PcareExamination {
	id: ID
	created: String
	modified: String
	bmi: Float
	consciousness: String
	destinationPolyclinic: String
	diagnosis: String
	diagnosis2: String
	diagnosis3: String
	diastole: Int
	dischargeStatus: String
	disease: String
	facility: String
	heartRate: Float
	height: Float
	internalReferralPolyclinic: String
	jsoninsert: String
	jsonupdate: String
	medicalStaff: String
	pkk: String
	referringDate: String
	respiratoryRate: Float
	special: String
	subSpecialist: String
	systole: Int
	tacc: String
	taccReason: String
	therapy: String
	treatment: String
	visitType: String
	waistCircumference: Float
	weight: Float
	catatan: String
	kdsubspesialis1: String
	nokunjungan: String
	rujuklanjut: String
	tglpulang: String
	registration: Registration
	pcareActionExaminations: [PcareActionExamination]
	pcareCompoundDrugs: [PcareCompoundDrug]
	pcareNonCompoundDrugs: [PcareNonCompoundDrug]
	# % protected region % [Add any additional field definition here] off begin
	# % protected region % [Add any additional field definition here] end
}

type PcareExaminationAudit {
	entity: PcareExamination
	timestamp: String
	type: AuditQueryType
	authorId: ID
	authorFirstName: String
	authorLastName: String
}

input PcareExaminationInput {
	id: ID
	created: String
	modified: String
	bmi: Float
	consciousness: String
	destinationPolyclinic: String
	diagnosis: String
	diagnosis2: String
	diagnosis3: String
	diastole: Int
	dischargeStatus: String
	disease: String
	facility: String
	heartRate: Float
	height: Float
	internalReferralPolyclinic: String
	jsoninsert: String
	jsonupdate: String
	medicalStaff: String
	pkk: String
	referringDate: String
	respiratoryRate: Float
	special: String
	subSpecialist: String
	systole: Int
	tacc: String
	taccReason: String
	therapy: String
	treatment: String
	visitType: String
	waistCircumference: Float
	weight: Float
	catatan: String
	kdsubspesialis1: String
	nokunjungan: String
	rujuklanjut: String
	tglpulang: String
	registration: RegistrationInput
	registrationId: ID
	pcareActionExaminations: [PcareActionExaminationInput]
	pcareActionExaminationsIds: [ID!]
	pcareCompoundDrugs: [PcareCompoundDrugInput]
	pcareCompoundDrugsIds: [ID!]
	pcareNonCompoundDrugs: [PcareNonCompoundDrugInput]
	pcareNonCompoundDrugsIds: [ID!]
	# % protected region % [Add any additional field definition for input type here] off begin
	# % protected region % [Add any additional field definition for input type here] end
}

extend type Query {
	countPcareExaminations(where: [[Where!]!]): Int!
	lastPcareExaminations(pageIndex: Int = 0, pageSize: Int = 10, orderBy: [OrderBy!]! = [], where: [[Where!]!] = []): [PcareExamination!]!
	pcareExaminations(pageIndex: Int = 0, pageSize: Int = 10, orderBy: [OrderBy!] = [], where: [[Where!]!] = []): [PcareExamination!]!
	pcareExaminationById(id: ID!): PcareExamination
	pcareExaminationAudits: [PcareExaminationAudit!]!
	pcareExaminationAuditsByEntityId(pcareExaminationId: ID!): [PcareExaminationAudit!]!
	# % protected region % [Add any additional query definition here] off begin
	# % protected region % [Add any additional query definition here] end
}

extend type Mutation {
	createPcareExamination(pcareExamination: PcareExaminationInput!, persistRelations: Boolean): PcareExamination!
	createAllPcareExamination(pcareExaminations: [PcareExaminationInput!]!): [PcareExamination!]!
	updatePcareExamination(pcareExamination: PcareExaminationInput!, persistRelations: Boolean): PcareExamination!
	updateAllPcareExamination(pcareExaminations: [PcareExaminationInput!]!): [PcareExamination!]!
	deletePcareExaminationById(pcareExaminationId: ID!): ID!
	deleteAllPcareExaminationByIds(pcareExaminationIds: [ID!]!): [ID!]!
	deletePcareExaminationExcludingIds(pcareExaminationIds: [ID!]!): [ID!]!
	# % protected region % [Add any additional mutation definition here] off begin
	# % protected region % [Add any additional mutation definition here] end
}

# % protected region % [Add additional schema definition here] off begin
# % protected region % [Add additional schema definition here] end
