###
# @bot-written
#
# WARNING AND NOTICE
# Any access, download, storage, and/or use of this source code is subject to the terms and conditions of the
# Full Software Licence as accepted by you before being granted access to this source code and other materials,
# the terms of which can be accessed on the Codebots website at https://codebots.com/full-software-licence. Any
# commercial use in contravention of the terms of the Full Software Licence may be pursued by Codebots through
# licence termination and further legal action, and be required to indemnify Codebots for any loss or damage,
# including interest and costs. You are deemed to have accepted the terms of the Full Software Licence on any
# access, download, storage, and/or use of this source code.
#
# BOT WARNING
# This file is bot-written.
# Any changes out side of "protected regions" will be lost next time the bot makes any changes.
###

type BpjsGeneral {
	id: ID
	created: String
	modified: String
	aplicareWebServiceURL: String
	bpjsWebServiceURL: String
	basicAuth: Boolean
	basicAuthPassword: String
	basicAuthUsername: String
	bypassSSLValidation: Boolean
	claimStatus: Boolean
	connectToOtherSystem: Boolean
	consID: String
	externalSystemURL: String
	externalVclaimServiceURL: String
	facilityType: String
	healthFacilityCode: String
	healthFacilityName: String
	ismobilejkn: Boolean
	mjknWSBPJSURL: String
	mjknWSBPJSUserKey: String
	secretKey: String
	sendNonJKN: Boolean
	vclaimIntegration: Boolean
	vclaimUserKey: String
	# % protected region % [Add any additional field definition here] off begin
	# % protected region % [Add any additional field definition here] end
}

type BpjsGeneralAudit {
	entity: BpjsGeneral
	timestamp: String
	type: AuditQueryType
	authorId: ID
	authorFirstName: String
	authorLastName: String
}

input BpjsGeneralInput {
	id: ID
	created: String
	modified: String
	aplicareWebServiceURL: String
	bpjsWebServiceURL: String
	basicAuth: Boolean
	basicAuthPassword: String
	basicAuthUsername: String
	bypassSSLValidation: Boolean
	claimStatus: Boolean
	connectToOtherSystem: Boolean
	consID: String
	externalSystemURL: String
	externalVclaimServiceURL: String
	facilityType: String
	healthFacilityCode: String
	healthFacilityName: String
	ismobilejkn: Boolean
	mjknWSBPJSURL: String
	mjknWSBPJSUserKey: String
	secretKey: String
	sendNonJKN: Boolean
	vclaimIntegration: Boolean
	vclaimUserKey: String
	# % protected region % [Add any additional field definition for input type here] off begin
	# % protected region % [Add any additional field definition for input type here] end
}

extend type Query {
	countBpjsGenerals(where: [[Where!]!]): Int!
	lastBpjsGenerals(pageIndex: Int = 0, pageSize: Int = 10, orderBy: [OrderBy!]! = [], where: [[Where!]!] = []): [BpjsGeneral!]!
	bpjsGenerals(pageIndex: Int = 0, pageSize: Int = 10, orderBy: [OrderBy!] = [], where: [[Where!]!] = []): [BpjsGeneral!]!
	bpjsGeneralById(id: ID!): BpjsGeneral
	bpjsGeneralAudits: [BpjsGeneralAudit!]!
	bpjsGeneralAuditsByEntityId(bpjsGeneralId: ID!): [BpjsGeneralAudit!]!
	# % protected region % [Add any additional query definition here] off begin
	# % protected region % [Add any additional query definition here] end
}

extend type Mutation {
	createBpjsGeneral(bpjsGeneral: BpjsGeneralInput!, persistRelations: Boolean): BpjsGeneral!
	createAllBpjsGeneral(bpjsGenerals: [BpjsGeneralInput!]!): [BpjsGeneral!]!
	updateBpjsGeneral(bpjsGeneral: BpjsGeneralInput!, persistRelations: Boolean): BpjsGeneral!
	updateAllBpjsGeneral(bpjsGenerals: [BpjsGeneralInput!]!): [BpjsGeneral!]!
	deleteBpjsGeneralById(bpjsGeneralId: ID!): ID!
	deleteAllBpjsGeneralByIds(bpjsGeneralIds: [ID!]!): [ID!]!
	deleteBpjsGeneralExcludingIds(bpjsGeneralIds: [ID!]!): [ID!]!
	# % protected region % [Add any additional mutation definition here] off begin
	# % protected region % [Add any additional mutation definition here] end
}

# % protected region % [Add additional schema definition here] off begin
# % protected region % [Add additional schema definition here] end
