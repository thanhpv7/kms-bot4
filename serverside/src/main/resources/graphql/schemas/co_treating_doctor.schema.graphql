###
# @bot-written
#
# WARNING AND NOTICE
# Any access, download, storage, and/or use of this source code is subject to the terms and conditions of the
# Full Software Licence as accepted by you before being granted access to this source code and other materials,
# the terms of which can be accessed on the Codebots website at https://codebots.com/full-software-licence. Any
# commercial use in contravention of the terms of the Full Software Licence may be pursued by Codebots through
# licence termination and further legal action, and be required to indemnify Codebots for any loss or damage,
# including interest and costs. You are deemed to have accepted the terms of the Full Software Licence on any
# access, download, storage, and/or use of this source code.
#
# BOT WARNING
# This file is bot-written.
# Any changes out side of "protected regions" will be lost next time the bot makes any changes.
###

type CoTreatingDoctor {
	id: ID
	created: String
	modified: String
	doctorNotes: String
	additionalAnesthesiologist: PreoperativeRecords
	additionalMidwife: DeliveryMedicalExaminationRecord
	additionalSurgeryNurse: PreoperativeRecords
	coTreatingAnesthesiologist: PreoperativeRecords
	medicalExaminationRecord: MedicalExaminationRecord
	staff: Staff
	coTreatingSurgeon: PreoperativeRecords
	# % protected region % [Add any additional field definition here] off begin
	# % protected region % [Add any additional field definition here] end
}

type CoTreatingDoctorAudit {
	entity: CoTreatingDoctor
	timestamp: String
	type: AuditQueryType
	authorId: ID
	authorFirstName: String
	authorLastName: String
}

input CoTreatingDoctorInput {
	id: ID
	created: String
	modified: String
	doctorNotes: String
	additionalAnesthesiologist: PreoperativeRecordsInput
	additionalAnesthesiologistId: ID
	additionalMidwife: DeliveryMedicalExaminationRecordInput
	additionalMidwifeId: ID
	additionalSurgeryNurse: PreoperativeRecordsInput
	additionalSurgeryNurseId: ID
	coTreatingAnesthesiologist: PreoperativeRecordsInput
	coTreatingAnesthesiologistId: ID
	medicalExaminationRecord: MedicalExaminationRecordInput
	medicalExaminationRecordId: ID
	staff: StaffInput
	staffId: ID
	coTreatingSurgeon: PreoperativeRecordsInput
	coTreatingSurgeonId: ID
	# % protected region % [Add any additional field definition for input type here] off begin
	# % protected region % [Add any additional field definition for input type here] end
}

extend type Query {
	countCoTreatingDoctors(where: [[Where!]!]): Int!
	lastCoTreatingDoctors(pageIndex: Int = 0, pageSize: Int = 10, orderBy: [OrderBy!]! = [], where: [[Where!]!] = []): [CoTreatingDoctor!]!
	coTreatingDoctors(pageIndex: Int = 0, pageSize: Int = 10, orderBy: [OrderBy!] = [], where: [[Where!]!] = []): [CoTreatingDoctor!]!
	coTreatingDoctorById(id: ID!): CoTreatingDoctor
	coTreatingDoctorAudits: [CoTreatingDoctorAudit!]!
	coTreatingDoctorAuditsByEntityId(coTreatingDoctorId: ID!): [CoTreatingDoctorAudit!]!
	# % protected region % [Add any additional query definition here] off begin
	# % protected region % [Add any additional query definition here] end
}

extend type Mutation {
	createCoTreatingDoctor(coTreatingDoctor: CoTreatingDoctorInput!, persistRelations: Boolean): CoTreatingDoctor!
	createAllCoTreatingDoctor(coTreatingDoctors: [CoTreatingDoctorInput!]!): [CoTreatingDoctor!]!
	updateCoTreatingDoctor(coTreatingDoctor: CoTreatingDoctorInput!, persistRelations: Boolean): CoTreatingDoctor!
	updateAllCoTreatingDoctor(coTreatingDoctors: [CoTreatingDoctorInput!]!): [CoTreatingDoctor!]!
	deleteCoTreatingDoctorById(coTreatingDoctorId: ID!): ID!
	deleteAllCoTreatingDoctorByIds(coTreatingDoctorIds: [ID!]!): [ID!]!
	deleteCoTreatingDoctorExcludingIds(coTreatingDoctorIds: [ID!]!): [ID!]!
	# % protected region % [Add any additional mutation definition here] off begin
	# % protected region % [Add any additional mutation definition here] end
}

# % protected region % [Add additional schema definition here] off begin
# % protected region % [Add additional schema definition here] end
