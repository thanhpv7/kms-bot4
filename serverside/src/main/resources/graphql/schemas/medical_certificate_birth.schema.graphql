###
# @bot-written
#
# WARNING AND NOTICE
# Any access, download, storage, and/or use of this source code is subject to the terms and conditions of the
# Full Software Licence as accepted by you before being granted access to this source code and other materials,
# the terms of which can be accessed on the Codebots website at https://codebots.com/full-software-licence. Any
# commercial use in contravention of the terms of the Full Software Licence may be pursued by Codebots through
# licence termination and further legal action, and be required to indemnify Codebots for any loss or damage,
# including interest and costs. You are deemed to have accepted the terms of the Full Software Licence on any
# access, download, storage, and/or use of this source code.
#
# BOT WARNING
# This file is bot-written.
# Any changes out side of "protected regions" will be lost next time the bot makes any changes.
###

type MedicalCertificateBirth {
	id: ID
	created: String
	modified: String
	birthNotes: String
	numberOfChildren: Int
	patientName: String
	spouseName: String
	registration: Registration
	medicalStaff: Staff
	# % protected region % [Add any additional field definition here] off begin
	# % protected region % [Add any additional field definition here] end
}

type MedicalCertificateBirthAudit {
	entity: MedicalCertificateBirth
	timestamp: String
	type: AuditQueryType
	authorId: ID
	authorFirstName: String
	authorLastName: String
}

input MedicalCertificateBirthInput {
	id: ID
	created: String
	modified: String
	birthNotes: String
	numberOfChildren: Int
	patientName: String
	spouseName: String
	registration: RegistrationInput
	registrationId: ID
	medicalStaff: StaffInput
	medicalStaffId: ID
	# % protected region % [Add any additional field definition for input type here] off begin
	# % protected region % [Add any additional field definition for input type here] end
}

extend type Query {
	countMedicalCertificateBirths(where: [[Where!]!]): Int!
	lastMedicalCertificateBirths(pageIndex: Int = 0, pageSize: Int = 10, orderBy: [OrderBy!]! = [], where: [[Where!]!] = []): [MedicalCertificateBirth!]!
	medicalCertificateBirths(pageIndex: Int = 0, pageSize: Int = 10, orderBy: [OrderBy!] = [], where: [[Where!]!] = []): [MedicalCertificateBirth!]!
	medicalCertificateBirthById(id: ID!): MedicalCertificateBirth
	medicalCertificateBirthAudits: [MedicalCertificateBirthAudit!]!
	medicalCertificateBirthAuditsByEntityId(medicalCertificateBirthId: ID!): [MedicalCertificateBirthAudit!]!
	# % protected region % [Add any additional query definition here] off begin
	# % protected region % [Add any additional query definition here] end
}

extend type Mutation {
	createMedicalCertificateBirth(medicalCertificateBirth: MedicalCertificateBirthInput!, persistRelations: Boolean): MedicalCertificateBirth!
	createAllMedicalCertificateBirth(medicalCertificateBirths: [MedicalCertificateBirthInput!]!): [MedicalCertificateBirth!]!
	updateMedicalCertificateBirth(medicalCertificateBirth: MedicalCertificateBirthInput!, persistRelations: Boolean): MedicalCertificateBirth!
	updateAllMedicalCertificateBirth(medicalCertificateBirths: [MedicalCertificateBirthInput!]!): [MedicalCertificateBirth!]!
	deleteMedicalCertificateBirthById(medicalCertificateBirthId: ID!): ID!
	deleteAllMedicalCertificateBirthByIds(medicalCertificateBirthIds: [ID!]!): [ID!]!
	deleteMedicalCertificateBirthExcludingIds(medicalCertificateBirthIds: [ID!]!): [ID!]!
	# % protected region % [Add any additional mutation definition here] off begin
	# % protected region % [Add any additional mutation definition here] end
}

# % protected region % [Add additional schema definition here] off begin
# % protected region % [Add additional schema definition here] end
