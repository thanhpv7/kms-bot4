/*
 * @bot-written
 *
 * WARNING AND NOTICE
 * Any access, download, storage, and/or use of this source code is subject to the terms and conditions of the
 * Full Software Licence as accepted by you before being granted access to this source code and other materials,
 * the terms of which can be accessed on the Codebots website at https://codebots.com/full-software-licence. Any
 * commercial use in contravention of the terms of the Full Software Licence may be pursued by Codebots through
 * licence termination and further legal action, and be required to indemnify Codebots for any loss or damage,
 * including interest and costs. You are deemed to have accepted the terms of the Full Software Licence on any
 * access, download, storage, and/or use of this source code.
 *
 * BOT WARNING
 * This file is bot-written.
 * Any changes out side of "protected regions" will be lost next time the bot makes any changes.
 */

// Plugins
plugins {
	id 'java'
	id 'war'
	id 'eclipse'
	id 'idea'
	id 'org.springframework.boot' version '2.6.4'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'com.adarshr.test-logger' version '1.6.0'
	id "com.palawanframe.angular" version "0.2"
	id "org.owasp.dependencycheck" version "7.0.0"
	id("com.github.johnrengelman.processes") version "0.5.0"
	id("org.springdoc.openapi-gradle-plugin") version "1.3.1"

	// % protected region % [Apply any additional plugins here] off begin
	// % protected region % [Apply any additional plugins here] end
}

repositories {
	// % protected region % [Alter any existing repositories here] off begin
	mavenCentral()
	mavenLocal()
	// % protected region % [Alter any existing repositories here] end
	// % protected region % [Apply any additional repositories here] off begin
	// % protected region % [Apply any additional repositories here] end
}

sourceCompatibility = 1.11
targetCompatibility = 1.11

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}

	integrationTestImplementation.extendsFrom(testImplementation)
	integrationTestRuntimeOnly.extendsFrom(testRuntimeOnly)

	// % protected region % [Apply any additional configurations here] off begin
	// % protected region % [Apply any additional configurations here] end
}

dependencies {
	// Addressing the vulnerability outlined in https://nvd.nist.gov/vuln/detail/CVE-2021-45046
	// as per the instructions in https://spring.io/blog/2021/12/10/log4j2-vulnerability-and-spring-boot
	ext['log4j2.version'] = '2.16.0'


	// Apache collection
	implementation 'org.apache.commons:commons-collections4:4.4'

	// Java socket
	implementation 'javax.websocket:javax.websocket-api'

	// Jackson
	implementation 'com.fasterxml.jackson.core:jackson-core'
	implementation 'com.fasterxml.jackson.core:jackson-databind'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

	// JWT
	implementation 'io.jsonwebtoken:jjwt:0.9.1'

	// OpenCSV
	implementation 'com.opencsv:opencsv:5.5.2'

	// Testing
	testImplementation(platform('org.junit:junit-bom:5.7.0'))
	testImplementation('org.junit.jupiter:junit-jupiter')
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'io.rest-assured:rest-assured'
	testImplementation 'io.rest-assured:json-path'
	testImplementation 'io.rest-assured:xml-path'
	testImplementation 'io.rest-assured:spring-mock-mvc'
	testImplementation 'io.rest-assured:json-schema-validator'
	testImplementation 'org.assertj:assertj-core'
	testImplementation 'com.graphql-java-kickstart:graphql-spring-boot-starter-test:12.0.0'
	testImplementation 'net.andreinc:mockneat:0.4.7'
	testImplementation 'com.icegreen:greenmail:1.6.5'
	testImplementation 'org.fluttercode.datafactory:datafactory:0.8'

	// Spring framework
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	implementation 'javax.xml.bind:jaxb-api'
	implementation 'com.sun.xml.bind:jaxb-impl:3.0.1'
	implementation 'com.sun.xml.bind:jaxb-core:3.0.1'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'org.springframework.boot:spring-boot-starter-quartz'
	implementation 'org.springframework.boot:spring-boot-starter-freemarker'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// GraphQL
	implementation 'com.graphql-java-kickstart:graphql-spring-boot-starter:6.0.1'
	runtimeOnly 'com.graphql-java-kickstart:altair-spring-boot-starter:11.1.0'
	runtimeOnly 'com.graphql-java-kickstart:graphiql-spring-boot-starter:11.1.0'
	runtimeOnly 'com.graphql-java-kickstart:voyager-spring-boot-starter:11.1.0'

	// Lombok
	implementation 'org.projectlombok:lombok'

	// Database
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'org.postgresql:postgresql'

	// Springdoc Open API documentation
	implementation 'org.springdoc:springdoc-openapi-ui:1.5.12'
	implementation 'org.springdoc:springdoc-openapi-data-rest:1.5.12'
	implementation 'org.springdoc:springdoc-openapi-security:1.5.12'
	implementation 'org.springdoc:springdoc-openapi-webmvc-core:1.5.12'

	// Hibernate
	implementation 'org.hibernate:hibernate-envers'
	implementation 'org.hibernate:hibernate-entitymanager'

	// Querydsl
	implementation 'com.querydsl:querydsl-jpa'

	// Process annotations
	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jpa'
	annotationProcessor 'org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.2.Final'
	annotationProcessor 'javax.annotation:javax.annotation-api:1.3.2'
	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:2.6.1"
	annotationProcessor 'org.hibernate.validator:hibernate-validator-annotation-processor:7.0.2.Final'


	// https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload
	implementation 'commons-fileupload:commons-fileupload:1.4'

	// AWS S3
	implementation 'com.amazonaws:aws-java-sdk-bom:1.11.228'
	implementation 'com.amazonaws:aws-java-sdk-s3:1.11.592'

	// https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload
	implementation 'commons-fileupload:commons-fileupload:1.4'

	// % protected region % [Apply any additional dependencies here] off begin
	// % protected region % [Apply any additional dependencies here] end
}

sourceSets {
	main {
		java {
			srcDirs = ['src/main/java']
		}
		resources {
			srcDirs = ['src/main/resources']
		}
	}
	test {
		java {
			srcDirs = ['src/test/java']
		}
		resources {
			srcDirs = ['src/test/resources']
		}
	}
	integrationTest {
		java {
			compileClasspath += sourceSets.main.output + sourceSets.test.output
			runtimeClasspath += sourceSets.main.output + sourceSets.test.output

			srcDirs = ['src/integrationTest/java']
		}
		resources {
			srcDirs = ['src/integrationTest/resources']
		}
	}
}

// Javadoc Settings
tasks.withType(Javadoc) {
	options.addStringOption('Xdoclint:none', '-quiet')
	options.addStringOption('encoding', 'UTF-8')
	options.addStringOption('charSet', 'UTF-8')
}

bootRun {
	if (project.hasProperty('profile')) {
		systemProperty 'spring.profiles.active', project.findProperty('profile')
	}
}

test {
	useJUnitPlatform()
}

task integrationTest(type: Test) {
	useJUnitPlatform()
	description = 'Runs integration tests.'
	group = 'verification'

	systemProperty 'spring.profiles.active', 'test'
	testClassesDirs = sourceSets.integrationTest.output.classesDirs
	classpath = sourceSets.integrationTest.runtimeClasspath
	shouldRunAfter test
}

check.dependsOn integrationTest

//  Allows the running of `gradle yarn angularCli --cmd=build --args="--prod" bootJar` to get a single in place run of both client and server. Not recommended for development
// To build a docker image as the end result in place of a JAR run `gradle yarn angularCli --cmd=build --args="--prod" bootBuildImage`
angular {
	output = "${buildDir}/resources/main/static"

	version = '11.2.14'

	// The rest of NodeJs parameters
	nodeVersion = '16.13.2'
	npmVersion = '8.1.22'
	download = true
	workDir = rootProject.file( '../clientside/.gradle/nodejs' )
	npmWorkDir = rootProject.file( '../clientside/.gradle/npm' )
	nodeModulesDir = rootProject.file( '../clientside/' )
}

// % protected region % [Add any additional Gradle tasks here] off begin
// % protected region % [Add any additional Gradle tasks here] end
