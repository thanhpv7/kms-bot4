/*
 * @bot-written
 *
 * WARNING AND NOTICE
 * Any access, download, storage, and/or use of this source code is subject to the terms and conditions of the
 * Full Software Licence as accepted by you before being granted access to this source code and other materials,
 * the terms of which can be accessed on the Codebots website at https://codebots.com/full-software-licence. Any
 * commercial use in contravention of the terms of the Full Software Licence may be pursued by Codebots through
 * licence termination and further legal action, and be required to indemnify Codebots for any loss or damage,
 * including interest and costs. You are deemed to have accepted the terms of the Full Software Licence on any
 * access, download, storage, and/or use of this source code.
 *
 * BOT WARNING
 * This file is bot-written.
 * Any changes out side of "protected regions" will be lost next time the bot makes any changes.
 */
import {FormGroup, Validators} from '@angular/forms';
import {Group, AbstractModel, ModelProperty, ModelPropertyType, ModelRelation, ModelRelationType} from '../../lib/models/abstract.model';
import {DiagnosesAndProceduresModel} from '../diagnosesAndProcedures/diagnoses_and_procedures.model';
import {DiagnosticStaffExaminationSummaryModel} from '../diagnosticStaffExaminationSummary/diagnostic_staff_examination_summary.model';
import {MedicalExaminationRecordModel} from '../medicalExaminationRecord/medical_examination_record.model';
import {MedicalExaminationRecordDischargeSummaryModel} from '../medicalExaminationRecordDischargeSummary/medical_examination_record_discharge_summary.model';
import {SampleCollectionInformationModel} from '../sampleCollectionInformation/sample_collection_information.model';
import * as _ from 'lodash';
import {QueryOperation, Where} from '../../lib/services/http/interfaces';
import {ElementType} from '../../lib/components/abstract.input.component';
import { CustomValidators } from 'src/app/lib/utils/validators/custom-validators';

// % protected region % [Add any additional imports here] off begin
// % protected region % [Add any additional imports here] end

/**
 * POJO model class used to store information related to the entity.
 */
export class DiagnosisExaminationRecordModel extends AbstractModel {
	/**
	 * The fields which are set as searchable in the entity model
	 * The fields could be used in search in the server side
	 * The fields would be by default used as search in the crud tile.
	 * You could also use this in other tiles for searching.
	 */
	static searchFields: string[] = [
		// % protected region % [Add any additional searchable field names here] off begin
		// % protected region % [Add any additional searchable field names here] end
	];

	/**
	 * Attributes to be shown in value to display
	 */
	static displayAttributes: string[] = [
		// % protected region % [Change displayAttributes here if needed] off begin
		'diagnosisSequence',
		// % protected region % [Change displayAttributes here if needed] end
	];

	static modelPropGroups: { [s: string]: Group } = {
		// % protected region % [Add groups for the entity here] off begin
		// % protected region % [Add groups for the entity here] end
	};

	readonly className = 'DiagnosisExaminationRecordModel';

	/**
	 * Default value to be displayed in dropdown etc
	 */
	get valueToDisplay(): string {
		// % protected region % [Change displayName here if needed] off begin
		return DiagnosisExaminationRecordModel.displayAttributes.map((attr) => this[attr]).join(' ');
		// % protected region % [Change displayName here if needed] end
	}

	/**
	 * Diagnosis Sequence with auto-generated by system counter from 1 (not shown on UI). Main Diagnosis is Seq No 1.
	 */
	diagnosisSequence: number;

	/**
	 * Diagnosis Notes (Max Length: 5000).
	 */
	diagnosisNotes: string;

	/**
	 * Action Notes (Max Length: 5000).
	 */
	actionNotes: string;

	/**
	 * .
	 */
	newCase: boolean = false;

	/**
	 * Printing Number.
	 */
	printingNumber: number;

	diagnosticStaffExaminationSummaryId: string;

	diagnosticStaffExaminationSummary: DiagnosticStaffExaminationSummaryModel;

	sampleCollectionInformationId: string;

	sampleCollectionInformation: SampleCollectionInformationModel;

	medicalExaminationRecordId: string;

	medicalExaminationRecord: MedicalExaminationRecordModel;

	medicalExaminationRecordDischargeSummaryId: string;

	medicalExaminationRecordDischargeSummary: MedicalExaminationRecordDischargeSummaryModel;

	icd10Id: string;

	icd10: DiagnosesAndProceduresModel;

	icd9CMId: string;

	icd9CM: DiagnosesAndProceduresModel;

	modelPropGroups: { [s: string]: Group } = DiagnosisExaminationRecordModel.modelPropGroups;

	// % protected region % [Add any additional class fields here] off begin
	// % protected region % [Add any additional class fields here] end

	static getProps(): ModelProperty[] {
		return super.getProps().concat([
			{
				name: 'diagnosisSequence',
				// % protected region % [Set displayName for Diagnosis Sequence here] off begin
				displayName: 'Diagnosis Sequence',
				// % protected region % [Set displayName for Diagnosis Sequence here] end
				type: ModelPropertyType.NUMBER,
				// % protected region % [Set display element type for Diagnosis Sequence here] off begin
				elementType: ElementType.NUMBER,
				// % protected region % [Set display element type for Diagnosis Sequence here] end
				// % protected region % [Set isSensitive for Diagnosis Sequence here] off begin
				isSensitive: false,
				// % protected region % [Set isSensitive for Diagnosis Sequence here] end
				// % protected region % [Set readonly for Diagnosis Sequence here] off begin
				readOnly: false,
				// % protected region % [Set readonly for Diagnosis Sequence here] end
				validators: [
					// % protected region % [Add other validators for Diagnosis Sequence here] off begin
					// % protected region % [Add other validators for Diagnosis Sequence here] end
				],
				// % protected region % [Add any additional model attribute properties for Diagnosis Sequence here] off begin
				// % protected region % [Add any additional model attribute properties for Diagnosis Sequence here] end
			},
			{
				name: 'diagnosisNotes',
				// % protected region % [Set displayName for Diagnosis Notes here] off begin
				displayName: 'Diagnosis Notes',
				// % protected region % [Set displayName for Diagnosis Notes here] end
				type: ModelPropertyType.STRING,
				// % protected region % [Set display element type for Diagnosis Notes here] off begin
				elementType: ElementType.INPUT,
				// % protected region % [Set display element type for Diagnosis Notes here] end
				// % protected region % [Set isSensitive for Diagnosis Notes here] off begin
				isSensitive: false,
				// % protected region % [Set isSensitive for Diagnosis Notes here] end
				// % protected region % [Set readonly for Diagnosis Notes here] off begin
				readOnly: false,
				// % protected region % [Set readonly for Diagnosis Notes here] end
				validators: [
					Validators.maxLength(5000),
					// % protected region % [Add other validators for Diagnosis Notes here] off begin
					// % protected region % [Add other validators for Diagnosis Notes here] end
				],
				// % protected region % [Add any additional model attribute properties for Diagnosis Notes here] off begin
				// % protected region % [Add any additional model attribute properties for Diagnosis Notes here] end
			},
			{
				name: 'actionNotes',
				// % protected region % [Set displayName for Action Notes here] off begin
				displayName: 'Action Notes',
				// % protected region % [Set displayName for Action Notes here] end
				type: ModelPropertyType.STRING,
				// % protected region % [Set display element type for Action Notes here] off begin
				elementType: ElementType.INPUT,
				// % protected region % [Set display element type for Action Notes here] end
				// % protected region % [Set isSensitive for Action Notes here] off begin
				isSensitive: false,
				// % protected region % [Set isSensitive for Action Notes here] end
				// % protected region % [Set readonly for Action Notes here] off begin
				readOnly: false,
				// % protected region % [Set readonly for Action Notes here] end
				validators: [
					Validators.maxLength(5000),
					// % protected region % [Add other validators for Action Notes here] off begin
					// % protected region % [Add other validators for Action Notes here] end
				],
				// % protected region % [Add any additional model attribute properties for Action Notes here] off begin
				// % protected region % [Add any additional model attribute properties for Action Notes here] end
			},
			{
				name: 'newCase',
				// % protected region % [Set displayName for New Case here] off begin
				displayName: 'New Case',
				// % protected region % [Set displayName for New Case here] end
				type: ModelPropertyType.BOOLEAN,
				// % protected region % [Set display element type for New Case here] off begin
				elementType: ElementType.CHECKBOX,
				// % protected region % [Set display element type for New Case here] end
				// % protected region % [Set isSensitive for New Case here] off begin
				isSensitive: false,
				// % protected region % [Set isSensitive for New Case here] end
				// % protected region % [Set readonly for New Case here] off begin
				readOnly: false,
				// % protected region % [Set readonly for New Case here] end
				validators: [
					// % protected region % [Add other validators for New Case here] off begin
					// % protected region % [Add other validators for New Case here] end
				],
				// % protected region % [Add any additional model attribute properties for New Case here] off begin
				// % protected region % [Add any additional model attribute properties for New Case here] end
			},
			{
				name: 'printingNumber',
				// % protected region % [Set displayName for Printing Number here] off begin
				displayName: 'Printing Number',
				// % protected region % [Set displayName for Printing Number here] end
				type: ModelPropertyType.NUMBER,
				// % protected region % [Set display element type for Printing Number here] off begin
				elementType: ElementType.NUMBER,
				// % protected region % [Set display element type for Printing Number here] end
				// % protected region % [Set isSensitive for Printing Number here] off begin
				isSensitive: false,
				// % protected region % [Set isSensitive for Printing Number here] end
				// % protected region % [Set readonly for Printing Number here] off begin
				readOnly: false,
				// % protected region % [Set readonly for Printing Number here] end
				validators: [
					// % protected region % [Add other validators for Printing Number here] off begin
					// % protected region % [Add other validators for Printing Number here] end
				],
				// % protected region % [Add any additional model attribute properties for Printing Number here] off begin
				// % protected region % [Add any additional model attribute properties for Printing Number here] end
			},
			// % protected region % [Add any additional class field names here] off begin
			// % protected region % [Add any additional class field names here] end
		]);
	}

	/**
	 * The relations of the entity
	 */
	static getRelations(): ModelRelation[] {
		return super.getRelations().concat([
			{
				id: 'diagnosticStaffExaminationSummary',
				type: ModelRelationType.ONE,
				name: 'diagnosticStaffExaminationSummaryId',
				// % protected region % [Customise your 1-1 or 1-M label for Diagnostic Staff Examination Summary here] off begin
				label: 'Diagnostic Staff Examination Summary',
				// % protected region % [Customise your 1-1 or 1-M label for Diagnostic Staff Examination Summary here] end
				entityName: 'DiagnosticStaffExaminationSummaryModel',
				// % protected region % [Customise your display name for Diagnostic Staff Examination Summary here] off begin
				displayName: 'responsibleDoctor',
				// % protected region % [Customise your display name for Diagnostic Staff Examination Summary here] end
				validators: [
					// % protected region % [Add other validators for Diagnostic Staff Examination Summary here] off begin
					// % protected region % [Add other validators for Diagnostic Staff Examination Summary here] end
				],
				// % protected region % [Add any additional field for relation Diagnostic Staff Examination Summary here] off begin
				// % protected region % [Add any additional field for relation Diagnostic Staff Examination Summary here] end
			},
			{
				id: 'sampleCollectionInformation',
				type: ModelRelationType.ONE,
				name: 'sampleCollectionInformationId',
				// % protected region % [Customise your 1-1 or 1-M label for Sample Collection Information here] off begin
				label: 'Sample Collection Information',
				// % protected region % [Customise your 1-1 or 1-M label for Sample Collection Information here] end
				entityName: 'SampleCollectionInformationModel',
				// % protected region % [Customise your display name for Sample Collection Information here] off begin
				displayName: 'patientInformed',
				// % protected region % [Customise your display name for Sample Collection Information here] end
				validators: [
					// % protected region % [Add other validators for Sample Collection Information here] off begin
					// % protected region % [Add other validators for Sample Collection Information here] end
				],
				// % protected region % [Add any additional field for relation Sample Collection Information here] off begin
				// % protected region % [Add any additional field for relation Sample Collection Information here] end
			},
			{
				id: 'medicalExaminationRecord',
				type: ModelRelationType.ONE,
				name: 'medicalExaminationRecordId',
				// % protected region % [Customise your label for Medical Examination Record here] off begin
				label: 'Medical Examination Record',
				// % protected region % [Customise your label for Medical Examination Record here] end
				entityName: 'MedicalExaminationRecordModel',
				// % protected region % [Customise your display name for Medical Examination Record here] off begin
				// TODO change implementation to use OrderBy or create new metamodel property DisplayBy
				displayName: 'diastole',
				// % protected region % [Customise your display name for Medical Examination Record here] end
				validators: [
					// % protected region % [Add other validators for Medical Examination Record here] off begin
					// % protected region % [Add other validators for Medical Examination Record here] end
				],
				// % protected region % [Add any additional field for relation Medical Examination Record here] off begin
				// % protected region % [Add any additional field for relation Medical Examination Record here] end
			},
			{
				id: 'medicalExaminationRecordDischargeSummary',
				type: ModelRelationType.ONE,
				name: 'medicalExaminationRecordDischargeSummaryId',
				// % protected region % [Customise your label for Medical Examination Record Discharge Summary here] off begin
				label: 'Medical Examination Record Discharge Summary',
				// % protected region % [Customise your label for Medical Examination Record Discharge Summary here] end
				entityName: 'MedicalExaminationRecordDischargeSummaryModel',
				// % protected region % [Customise your display name for Medical Examination Record Discharge Summary here] off begin
				// TODO change implementation to use OrderBy or create new metamodel property DisplayBy
				displayName: 'diastole',
				// % protected region % [Customise your display name for Medical Examination Record Discharge Summary here] end
				validators: [
					// % protected region % [Add other validators for Medical Examination Record Discharge Summary here] off begin
					// % protected region % [Add other validators for Medical Examination Record Discharge Summary here] end
				],
				// % protected region % [Add any additional field for relation Medical Examination Record Discharge Summary here] off begin
				// % protected region % [Add any additional field for relation Medical Examination Record Discharge Summary here] end
			},
			{
				id: 'icd10',
				type: ModelRelationType.ONE,
				name: 'icd10Id',
				// % protected region % [Customise your label for ICD 10 here] off begin
				label: 'ICD 10',
				// % protected region % [Customise your label for ICD 10 here] end
				entityName: 'DiagnosesAndProceduresModel',
				// % protected region % [Customise your display name for ICD 10 here] off begin
				// TODO change implementation to use OrderBy or create new metamodel property DisplayBy
				displayName: 'itemType',
				// % protected region % [Customise your display name for ICD 10 here] end
				validators: [
					// % protected region % [Add other validators for ICD 10 here] off begin
					// % protected region % [Add other validators for ICD 10 here] end
				],
				// % protected region % [Add any additional field for relation ICD 10 here] off begin
				// % protected region % [Add any additional field for relation ICD 10 here] end
			},
			{
				id: 'icd9CM',
				type: ModelRelationType.ONE,
				name: 'icd9CMId',
				// % protected region % [Customise your label for ICD 9 CM here] off begin
				label: 'ICD 9 CM',
				// % protected region % [Customise your label for ICD 9 CM here] end
				entityName: 'DiagnosesAndProceduresModel',
				// % protected region % [Customise your display name for ICD 9 CM here] off begin
				// TODO change implementation to use OrderBy or create new metamodel property DisplayBy
				displayName: 'itemType',
				// % protected region % [Customise your display name for ICD 9 CM here] end
				validators: [
					// % protected region % [Add other validators for ICD 9 CM here] off begin
					// % protected region % [Add other validators for ICD 9 CM here] end
				],
				// % protected region % [Add any additional field for relation ICD 9 CM here] off begin
				// % protected region % [Add any additional field for relation ICD 9 CM here] end
			},
		]);
	}

	/**
	 * Convert the form group to the query conditions
	 */
	static convertFilterToCondition(formGroup: FormGroup): Where[][] {
		let conditions: Where[][] = [];

		// % protected region % [Overide the default convertFilterToCondition here] off begin
		Object.keys(formGroup.value).forEach((key) => {
			switch (key) {
				case 'created':
					const created = formGroup.value[key];
					// is the range of date
					if (created instanceof Array) {
						conditions.push([
							{
								path: key,
								operation: QueryOperation.GREATER_THAN_OR_EQUAL,
								value: created[0]
							}
						]);
						conditions.push([
							{
								path: key,
								operation: QueryOperation.LESS_THAN_OR_EQUAL,
								value: created[1]
							}
						]);
					}
			}
		});
		// % protected region % [Overide the default convertFilterToCondition here] end


		return conditions;
	}

	/**
	 * Convert a nested JSON object into an array of flatten objects.
	 */
	static deepParse(data: string | { [K in keyof DiagnosisExaminationRecordModel]?: DiagnosisExaminationRecordModel[K] }, currentModel?): AbstractModel[] {
		if (currentModel == null) {
			currentModel = new DiagnosisExaminationRecordModel(data);
		}

		let returned: AbstractModel[] = [currentModel];
		const json = typeof data === 'string' ? JSON.parse(data) : data;

		// Outgoing one to one
		if (json.diagnosticStaffExaminationSummary) {
			currentModel.diagnosticStaffExaminationSummaryId = json.diagnosticStaffExaminationSummary.id;
			returned = _.union(returned, DiagnosticStaffExaminationSummaryModel.deepParse(json.diagnosticStaffExaminationSummary));
		}

		// Outgoing one to one
		if (json.sampleCollectionInformation) {
			currentModel.sampleCollectionInformationId = json.sampleCollectionInformation.id;
			returned = _.union(returned, SampleCollectionInformationModel.deepParse(json.sampleCollectionInformation));
		}

		// Incoming one to many
		if (json.medicalExaminationRecord) {
			currentModel.medicalExaminationRecordId = json.medicalExaminationRecord.id;
			returned = _.union(returned, MedicalExaminationRecordModel.deepParse(json.medicalExaminationRecord));
		}

		// Incoming one to many
		if (json.medicalExaminationRecordDischargeSummary) {
			currentModel.medicalExaminationRecordDischargeSummaryId = json.medicalExaminationRecordDischargeSummary.id;
			returned = _.union(returned, MedicalExaminationRecordDischargeSummaryModel.deepParse(json.medicalExaminationRecordDischargeSummary));
		}

		// Incoming one to many
		if (json.icd10) {
			currentModel.icd10Id = json.icd10.id;
			returned = _.union(returned, DiagnosesAndProceduresModel.deepParse(json.icd10));
		}

		// Incoming one to many
		if (json.icd9CM) {
			currentModel.icd9CMId = json.icd9CM.id;
			returned = _.union(returned, DiagnosesAndProceduresModel.deepParse(json.icd9CM));
		}


		// % protected region % [Customise your deep parse before return here] off begin
		// % protected region % [Customise your deep parse before return here] end

		return returned;
	}

	/**
	 * @example
	 *
	 * `let diagnosisExaminationRecordModel = new DiagnosisExaminationRecordModel(data);`
	 *
	 * @param data The input data to be initialised as the DiagnosisExaminationRecordModel,
	 *    it is expected as a JSON string or as a nullable DiagnosisExaminationRecordModel.
	 */
	constructor(data?: string | Partial<DiagnosisExaminationRecordModel>) {
		super(data);

		if (data) {
			const json = typeof data === 'string'
				? JSON.parse(data) as Partial<DiagnosisExaminationRecordModel>
				: data;

			this.diagnosisSequence = json.diagnosisSequence;
			this.diagnosisNotes = json.diagnosisNotes;
			this.actionNotes = json.actionNotes;
			this.newCase = json.newCase;
			this.printingNumber = json.printingNumber;
			this.diagnosticStaffExaminationSummaryId = json.diagnosticStaffExaminationSummaryId;
			this.diagnosticStaffExaminationSummary = json.diagnosticStaffExaminationSummary;
			this.sampleCollectionInformationId = json.sampleCollectionInformationId;
			this.sampleCollectionInformation = json.sampleCollectionInformation;
			this.medicalExaminationRecordId = json.medicalExaminationRecordId;
			this.medicalExaminationRecord = json.medicalExaminationRecord;
			this.medicalExaminationRecordDischargeSummaryId = json.medicalExaminationRecordDischargeSummaryId;
			this.medicalExaminationRecordDischargeSummary = json.medicalExaminationRecordDischargeSummary;
			this.icd10Id = json.icd10Id;
			this.icd10 = json.icd10;
			this.icd9CMId = json.icd9CMId;
			this.icd9CM = json.icd9CM;
			// % protected region % [Add any additional logic here after set the data] off begin
			// % protected region % [Add any additional logic here after set the data] end
		}

		// % protected region % [Add any additional constructor logic here] off begin
		// % protected region % [Add any additional constructor logic here] end
	}

	toJSON() {
		return {
			...super.toJSON(),
			diagnosisSequence: this.diagnosisSequence,
			diagnosisNotes: this.diagnosisNotes,
			actionNotes: this.actionNotes,
			newCase: this.newCase,
			printingNumber: this.printingNumber,
			diagnosticStaffExaminationSummaryId: this.diagnosticStaffExaminationSummaryId,
			sampleCollectionInformationId: this.sampleCollectionInformationId,
			medicalExaminationRecordId: this.medicalExaminationRecordId,
			medicalExaminationRecordDischargeSummaryId: this.medicalExaminationRecordDischargeSummaryId,
			icd10Id: this.icd10Id,
			icd9CMId: this.icd9CMId,
			// % protected region % [Add any additional logic here to json] off begin
			// % protected region % [Add any additional logic here to json] end
		};
	}

	getPropDisplayNames(): { [s: string]: ModelProperty } {
		const returned = {};
		DiagnosisExaminationRecordModel.getProps().map(prop => returned[prop.name] = prop);
		return returned;
	}

	applyUpdates(updates: any): DiagnosisExaminationRecordModel {
		let newModelJson = this.toJSON();

		if (updates.diagnosisSequence) {
			newModelJson.diagnosisSequence = updates.diagnosisSequence;
		}

		if (updates.diagnosisNotes) {
			newModelJson.diagnosisNotes = updates.diagnosisNotes;
		}

		if (updates.actionNotes) {
			newModelJson.actionNotes = updates.actionNotes;
		}

		if (updates.newCase) {
			newModelJson.newCase = updates.newCase;
		}

		if (updates.printingNumber) {
			newModelJson.printingNumber = updates.printingNumber;
		}

		if (updates.diagnosticStaffExaminationSummaryId) {
			newModelJson.diagnosticStaffExaminationSummaryId = updates.diagnosticStaffExaminationSummaryId;
		}

		if (updates.sampleCollectionInformationId) {
			newModelJson.sampleCollectionInformationId = updates.sampleCollectionInformationId;
		}

		if (updates.medicalExaminationRecordId) {
			newModelJson.medicalExaminationRecordId = updates.medicalExaminationRecordId;
		}

		if (updates.medicalExaminationRecordDischargeSummaryId) {
			newModelJson.medicalExaminationRecordDischargeSummaryId = updates.medicalExaminationRecordDischargeSummaryId;
		}

		if (updates.icd10Id) {
			newModelJson.icd10Id = updates.icd10Id;
		}

		if (updates.icd9CMId) {
			newModelJson.icd9CMId = updates.icd9CMId;
		}

		return new DiagnosisExaminationRecordModel(newModelJson);
	}

	/**
	 * @inheritDoc
	 */
	difference(other: AbstractModel): any {
		if (!(other instanceof DiagnosisExaminationRecordModel)) {
			return {};
		}

		const diff = {};

		for (const key of _.keys(this)) {
			const thisValue = this[key];
			const otherValue = other[key];

			// Handle dates differently
			if (thisValue instanceof Date) {
				let thisDate = (thisValue) ? thisValue.getTime() : null;
				let otherDate = (otherValue) ? otherValue.getTime() : null;

				if (thisDate !== otherDate) {
					diff[key] = thisValue;
				}
			} else if (thisValue !== otherValue) {
				diff[key] = thisValue;
			}
		}

		return _.omit(diff, [
			'created',
			'modified',
			'diagnosticStaffExaminationSummaryId',
			'diagnosticStaffExaminationSummary',
			'sampleCollectionInformationId',
			'sampleCollectionInformation',
			'medicalExaminationRecordId',
			'medicalExaminationRecord',
			'medicalExaminationRecordDischargeSummaryId',
			'medicalExaminationRecordDischargeSummary',
			'icd10Id',
			'icd10',
			'icd9CMId',
			'icd9CM',
			// % protected region % [Add any other fields to omit here] off begin
			// % protected region % [Add any other fields to omit here] end
		]);
	}

	/**
	 * Sets the relation ID parameters to be based on the ID's of the associated entities.
	 * 
	 * Fetching entities is based on the object, but updating relations is based on the id, so we need to
	 * make sure that they match
	 */
	syncRelations() {
		if (!this.diagnosticStaffExaminationSummary) {
			this.diagnosticStaffExaminationSummaryId = null;
		} else {
			this.diagnosticStaffExaminationSummaryId = this.diagnosticStaffExaminationSummary.id;
		}

		if (!this.sampleCollectionInformation) {
			this.sampleCollectionInformationId = null;
		} else {
			this.sampleCollectionInformationId = this.sampleCollectionInformation.id;
		}

		if (!this.medicalExaminationRecord) {
			this.medicalExaminationRecordId = null;
		} else {
			this.medicalExaminationRecordId = this.medicalExaminationRecord.id;
		}

		if (!this.medicalExaminationRecordDischargeSummary) {
			this.medicalExaminationRecordDischargeSummaryId = null;
		} else {
			this.medicalExaminationRecordDischargeSummaryId = this.medicalExaminationRecordDischargeSummary.id;
		}

		if (!this.icd10) {
			this.icd10Id = null;
		} else {
			this.icd10Id = this.icd10.id;
		}

		if (!this.icd9CM) {
			this.icd9CMId = null;
		} else {
			this.icd9CMId = this.icd9CM.id;
		}

	}

	// % protected region % [Add any additional class methods here] off begin
	// % protected region % [Add any additional class methods here] end
}
