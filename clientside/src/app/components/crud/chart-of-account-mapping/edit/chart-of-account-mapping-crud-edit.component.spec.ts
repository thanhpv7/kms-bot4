/*
 * @bot-written
 *
 * WARNING AND NOTICE
 * Any access, download, storage, and/or use of this source code is subject to the terms and conditions of the
 * Full Software Licence as accepted by you before being granted access to this source code and other materials,
 * the terms of which can be accessed on the Codebots website at https://codebots.com/full-software-licence. Any
 * commercial use in contravention of the terms of the Full Software Licence may be pursued by Codebots through
 * licence termination and further legal action, and be required to indemnify Codebots for any loss or damage,
 * including interest and costs. You are deemed to have accepted the terms of the Full Software Licence on any
 * access, download, storage, and/or use of this source code.
 *
 * BOT WARNING
 * This file is bot-written.
 * Any changes out side of "protected regions" will be lost next time the bot makes any changes.
 */

import { ActivatedRoute } from '@angular/router';
import { BehaviorSubject } from 'rxjs';
import { By } from '@angular/platform-browser';
import { ComponentFixture, TestBed, waitForAsync, fakeAsync } from '@angular/core/testing';
import { CookieService } from 'ngx-cookie-service';
import { DebugElement } from '@angular/core';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { HttpClientTestingModule } from '@angular/common/http/testing';
import { Store } from '@ngrx/store';
import { MockStore, provideMockStore } from '@ngrx/store/testing';
import { ModalDialogService, ModalDialogInstanceService } from '@preeco-privacy/ngx-modal-dialog';
import { ActivatedRouteStub } from 'src/testing/helpers/activated-route-stub';
import { CommonComponentModule } from 'src/app/lib/components/common.component.module';
import { getRouterState } from 'src/app/models/model.selector';
import { RouterState } from 'src/app/models/model.state';
import { 
	getChartOfAccountMappingCollectionModels,
	getCountChartOfAccountMappingModels,
	getChartOfAccountMappingModelWithId
} from 'src/app/models/chartOfAccountMapping/chart_of_account_mapping.model.selector';
import { ChartOfAccountMappingCrudModule } from '../chart-of-account-mapping-crud.module';
import { ChartOfAccountMappingCrudEditComponent } from './chart-of-account-mapping-crud-edit.component';
import {
	ChartOfAccountMappingModelState,
	initialState as initialChartOfAccountMappingModelState
} from 'src/app/models/chartOfAccountMapping/chart_of_account_mapping.model.state';
import { ChartOfAccountMappingDataFactory } from 'src/app/lib/utils/factories/chart-of-account-mapping-data-factory';
import { ChartOfAccountMappingModel } from 'src/app/models/chartOfAccountMapping/chart_of_account_mapping.model';
import { CrudTileMode } from '../chart-of-account-mapping-crud.component';
import { getChartOfAccountModelWithId } from 'src/app/models/chartOfAccount/chart_of_account.model.selector';
import { getChartOfAccountCollectionModels } from 'src/app/models/chartOfAccount/chart_of_account.model.selector';
import { ChartOfAccountModel } from 'src/app/models/chartOfAccount/chart_of_account.model';
import { ChartOfAccountDataFactory } from 'src/app/lib/utils/factories/chart-of-account-data-factory';

describe('Chart of Account Mapping CRUD Edit component tests', () => {
	let fixture: ComponentFixture<ChartOfAccountMappingCrudEditComponent>
	let component: ChartOfAccountMappingCrudEditComponent;

	let chartOfAccountMappingModelState: ChartOfAccountMappingModelState;

	let store: MockStore<{ model: ChartOfAccountMappingModelState }>;
	let routerStore: MockStore<{router: RouterState}>;

	let routerStateBehaviorSubject: BehaviorSubject<RouterState>;
	let chartOfAccountMappingCountBehaviorSubject: BehaviorSubject<number>;
	let chartOfAccountMappingModelsBehaviorSubject: BehaviorSubject<ChartOfAccountMappingModel[]>;
	let chartOfAccountModelsBehaviorSubject: BehaviorSubject<ChartOfAccountModel[]>;

	const chartOfAccountMappingFactory: ChartOfAccountMappingDataFactory = new ChartOfAccountMappingDataFactory();
	const defaultChartOfAccountMappingCount: number = 10;
	const defaultChartOfAccountMappingEntities: ChartOfAccountMappingModel[] = chartOfAccountMappingFactory.createAll(defaultChartOfAccountMappingCount);

	const chartOfAccountFactory: ChartOfAccountDataFactory = new ChartOfAccountDataFactory();
	const defaultChartOfAccountCount: number = 10;
	const defaultChartOfAccountEntities: ChartOfAccountModel[] = chartOfAccountFactory.createAll(defaultChartOfAccountCount);


	// We define the entity which is used in edit mode after all of the other entities because we can now
	// use the data already generated by the previous entity factories to populate the relations of this entity
	let chartOfAccountMappingWithId: ChartOfAccountMappingModel = defaultChartOfAccountMappingEntities[0];
	let chartOfAccountMappingModelWithIdBehaviorSubject: BehaviorSubject<ChartOfAccountMappingModel>;

	chartOfAccountMappingWithId.chartOfAccount = defaultChartOfAccountEntities[0];
	chartOfAccountMappingWithId.chartOfAccountId = chartOfAccountMappingWithId.chartOfAccount.id;
	let chartOfAccountWithIdBehaviorSubject: BehaviorSubject<ChartOfAccountModel>;


	const routerState: RouterState = {
		url: 'chart-of-account-mapping-crud',
		urls: ['chart-of-account-mapping-crud'],
		params: {},
		queryParams: {},
		data: {},
	};

	function spySelectorsInStore() {
		// Setup the Mock Store and fake selector
		store = TestBed.inject(Store) as MockStore<{ model: ChartOfAccountMappingModelState }>;
		routerStore = TestBed.inject(Store) as MockStore<{ router: RouterState }>;

		chartOfAccountMappingModelState = initialChartOfAccountMappingModelState;
		store.setState({model: chartOfAccountMappingModelState});
		routerStateBehaviorSubject = new BehaviorSubject(routerState);
		chartOfAccountMappingCountBehaviorSubject = new BehaviorSubject(defaultChartOfAccountMappingCount);

		// selectors for all references
		chartOfAccountMappingModelsBehaviorSubject = new BehaviorSubject(defaultChartOfAccountMappingEntities);
		chartOfAccountModelsBehaviorSubject = new BehaviorSubject(defaultChartOfAccountEntities);

		// selectors for target entity and its related entity
		chartOfAccountMappingModelWithIdBehaviorSubject = new BehaviorSubject(chartOfAccountMappingWithId);
		chartOfAccountWithIdBehaviorSubject = new BehaviorSubject(chartOfAccountMappingWithId.chartOfAccount);

		spyOn(store, 'select')
			.withArgs(getCountChartOfAccountMappingModels).and.returnValue(chartOfAccountMappingCountBehaviorSubject)
			.withArgs(getChartOfAccountMappingModelWithId, chartOfAccountMappingWithId.id).and.returnValue(chartOfAccountMappingModelWithIdBehaviorSubject)
			.withArgs(getChartOfAccountMappingCollectionModels, jasmine.any(String)).and.returnValue(chartOfAccountMappingModelsBehaviorSubject)
			.withArgs(getChartOfAccountCollectionModels, jasmine.any(String)).and.returnValue(chartOfAccountModelsBehaviorSubject)
			.withArgs(getChartOfAccountModelWithId, chartOfAccountMappingWithId.chartOfAccountId).and.returnValue(chartOfAccountWithIdBehaviorSubject)
			.withArgs(getRouterState).and.returnValue(routerStateBehaviorSubject);
	}

	beforeEach(waitForAsync (() => {

		const activatedRouteStub = new ActivatedRouteStub();

		TestBed.configureTestingModule({
			imports: [
				HttpClientTestingModule,
				ChartOfAccountMappingCrudModule,
				CommonComponentModule,
				FormsModule,
				ReactiveFormsModule,
			],
			providers: [
				provideMockStore(),
				{
					provide: ActivatedRoute,
					useValue: activatedRouteStub,
				},
				CookieService,
				ModalDialogService,
				ModalDialogInstanceService,
			]
		}).compileComponents().then(() => {

			spySelectorsInStore();

			fixture = TestBed.createComponent(ChartOfAccountMappingCrudEditComponent);
			component = fixture.debugElement.componentInstance;
			component.ngOnInit();
			component.targetModel = new ChartOfAccountMappingModel();
			component.createReactiveForm();
			fixture.detectChanges();


		});
	}));

	afterEach(() => {
		// Need to do this since for some reason the last component queried from the fixture will be rendered on the
		// browser
		if (fixture.nativeElement instanceof HTMLElement) {
			(fixture.nativeElement as HTMLElement).remove();
		}
		component.ngOnDestroy();
	});

	/**
	 * Checks that the component is created by the test initialisation
	 */
	it ('Renders the Chart of Account Mapping CRUD Edit Component', () => {
		expect(component).toBeTruthy();
	});

	/**
	 * Checks that there are no add additional model buttons present in the component when in view mode.
	 *
	 * This test does not require checking whether multi crud is active for a given relation, as the expected outcome
	 * is identical for components with multi entity crud active and for components without it
	 */
	it ('Does not render any add entity buttons when in view mode', fakeAsync(() => {
		component.tileMode = CrudTileMode.View;
		fixture.detectChanges();

		const addEntityButtons: DebugElement[] = fixture.debugElement
				.queryAll(By.css('button.btn__add-entity'));

		expect(addEntityButtons.length).toEqual(0);
	}));

	/**
	* Checks that the status of the add model button matches the multi entity status for the Chart of Account relation.
	*
	* The button should only exist if chartOfAccountMultiCrudActive is true
	*/
	it ('Renders Chart of Account Add Entity button in create mode', fakeAsync(() => {
		const chartOfAccountButton: DebugElement = fixture.debugElement
				.queryAll(By.css('button.btn__add-entity'))
				.find(element => element.nativeElement.textContent.includes('Add New ' + component.chartOfAccountDisplayName + ' to Model'));

		// For this test we don't need to interact with the button, as we are looking to prove that it exists and is present on the page
		// prepending the element with `!!` will turn the object into a boolean which is true if the element exists and false otherwise
		// If multi crud is off for this entity, then we expect the button to not exist, so we can check for equality with the MultiCrudActive attribute
		expect(!!chartOfAccountButton).toEqual(component.chartOfAccountMultiCrudActive);
	}));


	it ('Adds a new entity to the page when clicking button to add new Chart of Account', fakeAsync(() => {
		const chartOfAccountButton: DebugElement = fixture.debugElement
				.queryAll(By.css('button.btn__add-entity'))
				.find(element => element.nativeElement.textContent.includes('Add New ' + component.chartOfAccountDisplayName + ' to Model'));

		// Any expectations beyond this will only be run if multi crud is active for this entity
		// We can't run the test conditionally as the value we need to check by is set asyncronously during setup
		// We also don't want tests without any conditions, so adding this check here was deemed to be the cleanest option for now
		expect(!!chartOfAccountButton).toEqual(component.chartOfAccountMultiCrudActive);

		if (component.chartOfAccountMultiCrudActive) {
			// After clicking the add entity button, we will expect that the number of these buttons increases
			// We store this value now so that we can access it following interaction with the component
			const initialChartOfAccountRemoveButtonCount = fixture.debugElement
					.queryAll(By.css('button.btn__remove-entity'))
					.filter(element => element.nativeElement.textContent.includes('Remove ' + component.chartOfAccountDisplayName + ' from Model')).length;

			chartOfAccountButton.nativeElement.click();
			fixture.detectChanges();

			const actualChartOfAccountRemoveButtonCount = fixture.debugElement
					.queryAll(By.css('button.btn__remove-entity'))
					.filter(element => element.nativeElement.textContent.includes('Remove ' + component.chartOfAccountDisplayName + ' from Model')).length;

			expect(actualChartOfAccountRemoveButtonCount).toEqual(initialChartOfAccountRemoveButtonCount + 1);
		}
	}));

	it ('Removes an additional entity from the page when clicking remove Chart of Account button', () => {
		const chartOfAccountButton: DebugElement = fixture.debugElement
				.queryAll(By.css('button.btn__add-entity'))
				.find(element => element.nativeElement.textContent.includes('Add New ' + component.chartOfAccountDisplayName + ' to Model'));

		// Any expectations beyond this will only be run if multi crud is active for this entity
		// We can't run the test conditionally as the value we need to check by is set asyncronously during setup
		// We also don't want tests without any conditions, so adding this check here was deemed to be the cleanest option for now
		expect(!!chartOfAccountButton).toEqual(component.chartOfAccountMultiCrudActive);

		if (component.chartOfAccountMultiCrudActive) {
			// This test is examining whether clicking the remove button will remove an additional entity.
			// By default there will be no remove buttons, so first we need to add an entity so we can test removal
			chartOfAccountButton.nativeElement.click();
			fixture.detectChanges();

			// create an array of elements here as opposed to just getting the length (like in previous tests)
			// as we need to interact with the button in this test
			const initialChartOfAccountRemoveButtons = fixture.debugElement
					.queryAll(By.css('button.btn__remove-entity'))
					.filter(element => element.nativeElement.textContent.includes('Remove ' + component.chartOfAccountDisplayName + ' from Model'));

			// As we have already tested that clicking the add button adds the element, we know there will be at lease one button here to click
			initialChartOfAccountRemoveButtons[0].nativeElement.click();
			fixture.detectChanges();

			const actualChartOfAccountRemoveButtons = fixture.debugElement
					.queryAll(By.css('button.btn__remove-entity'))
					.filter(element => element.nativeElement.textContent.includes('Remove ' + component.chartOfAccountDisplayName + ' from Model'));

			expect(actualChartOfAccountRemoveButtons.length).toEqual(initialChartOfAccountRemoveButtons.length - 1);
		}
	});

	it ('should disable the add Chart of Account button when one has already been added', () => {

		const chartOfAccountButton: DebugElement = fixture.debugElement
		.queryAll(By.css('button.btn__add-entity'))
		.find(element => element.nativeElement.textContent.includes('Add New ' + component.chartOfAccountDisplayName + ' to Model'));

		// Any expectations beyond this will only be run if multi crud is active for this entity
		// We can't run the test conditionally as the value we need to check by is set asyncronously during setup
		// We also don't want tests without any conditions, so adding this check here was deemed to be the cleanest option for now
		expect(!!chartOfAccountButton).toEqual(component.chartOfAccountMultiCrudActive);

		if (component.chartOfAccountMultiCrudActive) {
			chartOfAccountButton.nativeElement.click();
			fixture.detectChanges();

			const updatedchartOfAccountButton: DebugElement = fixture.debugElement
					.queryAll(By.css('button.btn__add-entity'))
					.find(element => element.nativeElement.textContent.includes('Add New ' + component.chartOfAccountDisplayName + ' to Model'));

			expect(updatedchartOfAccountButton.nativeElement.disabled).toBe(true);
		}
	});

	it ('renders related Chart of Account entities from model when loading in edit mode', () => {
		component.targetModel = chartOfAccountMappingWithId;
		component.targetModelId = chartOfAccountMappingWithId.id;
		component.tileMode = CrudTileMode.Edit;
		component.ngOnInit();
		component.createReactiveForm();
		component.multiCrudFetchAdditionalEntities();
		fixture.detectChanges();

		if (component.chartOfAccountMultiCrudActive) {
			// As there is always one remove button per additional entity, running a test against the number of remove buttons is a simple
			// and reliable method to determine how many entities of the given type are present in the crud page
			const chartOfAccountRemoveButtonCount = fixture.debugElement
				.queryAll(By.css('button.btn__remove-entity'))
				.filter(element => element.nativeElement.textContent.includes('Remove ' + component.chartOfAccountDisplayName + ' from Model')).length;

			expect(chartOfAccountRemoveButtonCount).toEqual(1);
		}
	});

});
